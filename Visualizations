import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from DSPI_v2 import DSPI_v2
from DSPI_valid_rho import DSPI_valid_rho
from DSPI_Upperlimit import DSPI_Upperlimit
from DSPI_Lowerlimit import DSPI_Lowerlimit
from DSPI_inverse import DSPI_inverse
from DSPI import DSPI
import DutchDraw as DutchDraw

# %% Experiment different Beta values

# Settings
M = 40 
P = 3
rho = 0

metric = "FBETA"

y_true = [1] * P + [0] * (M - P)

results = []
for alpha in np.linspace(0, 1):
    for b in [0.001, 0.1, 0.5, 1, 2, 5, 10, 20, 50, 10000, np.inf]:
        score = DSPI_v2(y_true, metric, alpha, rho, beta = b)
        results.append([alpha, b, score])
        
df = pd.DataFrame(results, columns = ["Alpha", "Metric", "Score"])

plt.figure(figsize = (10,10))
for metric, group, in df.groupby("Metric"):
    plt.plot(group["Alpha"], group["Score"], label = metric)
plt.xlabel(r'$\alpha$')
plt.ylabel(r'$F_\beta$')
plt.legend()
plt.show()

# %% Plot 1

M = 40 
P = 9
rho = 0

metric_options = ["PPV", "NPV", "ACC", "BACC", "FBETA", "MCC", "J", "MK", "KAPPA", "FM", "TS",]

y_true = [1] * P + [0] * (M - P)

results = []
for metric in metric_options:
    baseline = DutchDraw.optimized_baseline_statistics(y_true, metric)['Max Expected Value']    
    upper_limit = DSPI_Upperlimit(y_true, metric, rho)
    for s in np.linspace(baseline, upper_limit): 
        alpha, thetaopts = DSPI_inverse(y_true, metric, s, rho)
        score_v1 = DSPI(y_true, metric, alpha, thetaopts, rho)
        results.append([metric, M, P, baseline, upper_limit, rho, alpha, s, score_v1])

df = pd.DataFrame(results, columns = ["Metric", "M", "P", "Baseline", "Upper Bound", "rho", "Alpha", "Score", "Score_v1"])

plt.figure(figsize = (10,10))
for metric, group, in df.groupby("Metric"):
    plt.plot(group["Alpha"], group["Score"], label = metric)
plt.xlabel(r'$\alpha$')
plt.ylabel(r"DSPI")
plt.ylim(0,1)
plt.legend()
plt.show()

#%% Plot 2 Scaler

M = 40 
P = 9
rho = 0

metric_options = ["PPV", "NPV", "ACC", "BACC", "FBETA", "J", "KAPPA", "FM", "TS"]

y_true = [1] * P + [0] * (M - P)

results = []
for metric in metric_options:
    UB = DSPI_Upperlimit(y_true, metric, rho)
    LB = DSPI_Lowerlimit(y_true, metric)
    for alpha in np.linspace(0,1): 
        score = DSPI_v2(y_true, metric, alpha)
        score_scaled = (score - LB) / (UB - LB)
        results.append([metric, M, P, rho, alpha, score_scaled])

df = pd.DataFrame(results, columns = ["Metric", "M", "P", "rho", "Alpha", "Score"])

plt.figure(figsize = (10,10))
for metric, group, in df.groupby("Metric"):
    plt.plot(group["Alpha"], group["Score"], label = metric)
plt.xlabel(r'$\alpha$')
plt.ylabel(r"DSPI")
plt.ylim(0,1)
plt.legend()
plt.show()











